class SDLdisplay;

external classtype;

use Color8: all;
use Array: {*};

provide all;

SDLdisplay initDisplay( int[.] shp)
{
  return( initDisplay( shp, true));
}

external SDLdisplay initDisplay( int[.] shp, bool async);
#pragma linkobj "src/SDL/initDisplay.o"
#pragma linkwith "SDL"
#pragma effect World::TheWorld
#pragma refcounting [1]

external void destroyDisplay( SDLdisplay disp);
#pragma linkobj "src/SDL/destroyDisplay.o"
#pragma effect World::TheWorld
#pragma linkwith "SDL"

external void drawArray( SDLdisplay &disp, color[.,.] array);
#pragma linkobj "src/SDL/drawArray.o"
#pragma linkwith "SDL"
#pragma refcounting [1]

external void drawArrayOffset( SDLdisplay &disp, color[.,.] array, int[2] pic_offset);
#pragma linkobj "src/SDL/drawArrayOffset.o"
#pragma linkwith "SDL"
#pragma refcounting [1]

external void drawPixel( SDLdisplay &disp, int[.] idx, color val);
#pragma linkobj "src/SDL/drawPixel.o"
#pragma linkwith "SDL"
#pragma refcounting [1,2]

#if THEO_IS_A_SUPERHERO
void drawArrayDynamic( SDLdisplay &disp, color[.,.] array)
{
  res = with {
          ( 0*shape( array) <= iv < shape( array)) : drawPixel( disp, iv, array[iv]);
        } : propagate( disp );
  return();
}
#endif
