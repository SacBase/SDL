class SDL2;

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

/*
 * This class implements a layer on top of the Simple DirectMedia Layer.
 * It is backwards compatible with the 'SDLdisplay' SAC module.
 * Compared to the 'SDLdisplay' module it adds features, is sometimes faster
 * when copying data to pixel memory and may generate less screen updates.
 * Debugging output is generated when the environment variable SDL2_DEBUG
 * is set to 1, 2 or 3 for increasingly detailed output. 
 */

external classtype;

use Color8:      { color, white, black };
use String:      { string };
use World:       { TheWorld };
use ArrayArith:  { +, -, *, /, !=, all };
use ArrayBasics: { shape, sel, modarray };

export all;

external SDL2 initDisplay( int[2] shp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_display"
    #pragma linkobj  "src/SDL2/data.o"
    #pragma linkobj  "src/SDL2/display.o"
    #pragma linkobj  "src/SDL2/event.o"
    #pragma linkobj  "src/SDL2/init.o"
    #pragma linkobj  "src/SDL2/invert.o"
    #pragma linkobj  "src/SDL2/mouse.o"
    #pragma linkobj  "src/SDL2/names.o"
    #pragma linkobj  "src/SDL2/sem.o"
    #pragma linkobj  "src/SDL2/setup.o"
    #pragma linkobj  "src/SDL2/title.o"
    #pragma linkobj  "src/SDL2/update.o"
#ifdef NEED_LIBRT
    #pragma linkwith "rt"
#endif
    #pragma refcounting [1]
    /*
     * Open a new display window on screen.
     * The parameter 'shp' gives the Width/Height dimensions.
     * When width or height is zero then SDL will allocate
     * the maximum screen size for that dimension.
     */

inline SDL2 initDisplay( int[2] shp, bool async)
{
  d = initDisplay( shp);
  return( d);
}
    /*
     * Backward compatibility: Open a new display.
     * The parameter 'async' is ignored.
     */

SDL2 initMultiDisplay( int[2] layout, int[2] disp_shp)
{
  size = layout * disp_shp + (layout - 1) * 3;
  res = initDisplay( size, true);
  frame = with {
            ( . <= iv <= . step (disp_shp + 3) width disp_shp) : black();
          } : genarray( size, white());
  drawArray( res, frame);
  return( res);
}
    /*
     * Open a new display and divide the window into identical subsections.
     * The parameter 'layout' gives the number and relative position
     * of the subsections. The parameter 'disp_shp' gives the 
     * Width/Height dimensions of one subsection.
     */

external void resizeDisplay( SDL2& disp, int[2] shp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_resize"
    #pragma linkobj  "src/SDL2/resize.o"
    #pragma refcounting [1]
    /*
     * Resize an existing display window on screen.
     * The parameter 'shp' gives the desired Width/Height dimensions.
     * Beware that resizing to smaller dimensions may cause problems
     * for sub-windows of 'disp' when they are no longer contained
     * in the new area of 'disp'.
     */

external void destroyDisplay( SDL2& disp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_close"
    #pragma linkobj  "src/SDL2/close.o"
    /*
     * Close an existing display window and free associated resources.
     */

external SDL2 window( SDL2& disp, int[2] offset, int[2] size);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_window"
    #pragma linkobj  "src/SDL2/window.o"
    #pragma linksign [0,1,2,3]
    /*
     * Create a sub-window of an existing display.
     * This can be used to confine future draw operations to.
     *   - The parameter 'offset' gives the X/Y position of the window.
     *   - The parameter 'size' gives the Width/Height of the window.
     * Offset must be non-negative and 'offset' + 'size' must fit in 'disp'.
     */

external void drawArray( SDL2& disp, color[.,.] array);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_draw"
    #pragma linkobj  "src/SDL2/draw.o"
    #pragma refcounting [1]
    /*
     * Copy an array to a display window.
     * These must have identical dimensions.
     */


void drawArrayMulti( SDL2& disp, color[.,.] array, int[2] pos)
{
  drawArrayOffset( disp, array, (Color8::shape( array) + 3) * pos);
}
    /*
     * Copy an array to a given subsection of a multi-display.
     * The parameter 'pos' selects the subsection in the multi-display.
     */

external void drawArrayOffset( SDL2& disp, 
                               color[.,.] array, int[2] offset);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_draw2"
    #pragma linkobj  "src/SDL2/draw.o"
    #pragma refcounting [1]
    /*
     * Copy the array 'array' to a position on the display window 'disp'.
     * The X/Y-offset are given by the parameter 'offset'.
     * Offset must be non-negative and 'offset' + shape('array')
     * must fit in the display window.
     */

external int[2] getExtent( SDL2 &disp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_extent"
    #pragma linkobj  "src/SDL2/extent.o"
    #pragma linksign [1,2]
    /*
     * Request the Width/Height dimensions of a display window.
     */

external void drawPixel( SDL2 &disp, int[2] idx, color val);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_pixel"
    #pragma linkobj  "src/SDL2/pixel.o"
    #pragma refcounting [1,2]
    /*
     * Change the color value of a single pixel in the pixel buffer.
     * To update the pixel buffer to screen one of the update functions
     * must be used. See below. It is efficient to draw a large number
     * of pixels before one call to update the screen.
     */

external void drawLine( SDL2& disp, int[2] point1, int[2] point2, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_line"
    #pragma linkobj  "src/SDL2/line.o"
    #pragma linksign [1,2,3,4]
    /*
     * Draw a line from point1 to point2. The parameter 'async' requests an
     * asynchronous update when true. This is useful when drawing several 
     * lines in succession if the last operation is done synchronously.
     * Try to limit the number of successive asynchronous operations.
     * When 'async' is false a synchronous screen update is done immediately.
     */

external void drawRect( SDL2& disp, int[2] offset, int[2] size, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_draw_rect"
    #pragma linkobj  "src/SDL2/rect.o"
    #pragma linksign [1,2,3,4]
    /*
     * Draw a rectangle on screen:
     *   - The parameter 'offset' gives the X/Y position
     *   - The parameter 'size' gives the Width/Height of the rectangle.
     * Offset must be non-negative and 'offset' + 'size' must fit in 'disp'.
     * The parameter 'async' has the same purpose as in drawLine.
     */

external void fillRect( SDL2& disp, int[2] offset, int[2] size, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_fill_rect"
    #pragma linkobj  "src/SDL2/rect.o"
    #pragma linksign [1,2,3,4]
    /*
     * Fill a rectangle on screen:
     *   - The parameter 'offset' gives the X/Y position
     *   - The parameter 'size' gives the Width/Height of the rectangle.
     * Offset must be non-negative and 'offset' + 'size' must fit in 'disp'.
     * The parameter 'async' has the same purpose as in drawLine.
     */

external void fillDisp( SDL2& disp, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_fill_disp"
    #pragma linkobj  "src/SDL2/rect.o"
    #pragma linksign [1,2]
    /*
     * Fill a window with the foreground color.
     * The parameter 'async' has the same purpose as in drawLine.
     */

external void invertRect( SDL2& disp, int[2] offset, int[2] size);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_invert2"
    #pragma linkobj  "src/SDL2/invert.o"
    #pragma linksign [1,2,3]
    /*
     * Invert the colors of a rectangle on screen:
     *   - The parameter 'offset' gives the X/Y position
     *   - The parameter 'size' gives the Width/Height of the rectangle.
     * Offset must be non-negative and 'offset' + 'size' must fit in 'disp'.
     * A double invert restores the original image.
     */

external void updateDisp( SDL2& disp, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_update"
    #pragma linkobj  "src/SDL2/update.o"
    #pragma linksign [1,2]
    /*
     * Update the display or the sub-window. This copies the pixel buffer
     * to screen. Use this function in combination with drawPixel.
     *  - When 'async' is false the function waits for the update to complete.
     *  - When 'async' is true the function generates an update request
     *    and immediately returns. Use this with caution. Give the system
     *    an appropriate amount of time to complete the request before
     *    generating another update request. Note that subsequent draw
     *    operations may also be shown by the asynchronous update.
     */

external void updateRect( SDL2& disp, int[2] offset, int[2] size, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_update2"
    #pragma linkobj  "src/SDL2/update.o"
    #pragma linksign [1,2,3,4]
    /*
     * Update a rectangle in the display window similar to updateDisp:
     *   - offset gives the X/Y position
     *   - size the Width/Height of the rectangle.
     */

external void drawText( SDL2& disp, string text, int[2] offset, bool async);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_text"
    #pragma linkobj  "src/SDL2/font.o"
    #pragma linksign [1,2,3,4]
    /*
     * Display text at the given offset. Offset must fit in disp.
     * The drawing of 'text' is clipped by disp's dimensions.
     * Newlines '\n' and tabs '\t' change the cursor position. 
     * The text is written in the foreground color. The background
     * should have been cleared by the caller when this is desirable.
     */

external int[2,2] textExtent( string text);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_text_extent"
    #pragma linkobj  "src/SDL2/font.o"
    #pragma linksign [1,2]
    /*
     * Calculate the offset and the dimensions of the area
     * that will be needed to completely display a text string.
     */

external int[2,2] getSelection( SDL2 &disp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_select"
    #pragma linkobj  "src/SDL2/select.o"
    #pragma linksign [1,2]
    /*
     * Ask the user to select an area in the display window using
     * the left mouse button. The middle mouse button cancels.
     */

int[2], int[2,2] getSelectionMulti( SDL2 &disp, int[2] layout)
{
  selection = getSelection( disp);
  extent = getExtent( disp);
  shp = (extent - 3 * (layout - 1)) / layout;

  field = { [i] -> selection[[i]] / (shp + 3)};
  pos = { [i] -> selection[[i]] - 3 * field[[i]] - field[[i]] * shp};

  if (all( field[[0]] != field[[1]])) {
    pos[[1]] = shp - 1;
  } 

  return( field[[0]], pos);
}
    /*
     * Ask the user to select an area in any of the subsections
     * of a multi-window using the left mouse button.
     * The middle mouse button cancels.
     */

external void background( color background);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_set_background"
    #pragma linkobj  "src/SDL2/color.o"
    /*
     * Set the background color for future drawing operations.
     */

external color background( );
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_get_background"
    #pragma linkobj  "src/SDL2/color.o"
    #pragma linksign [1]
    /*
     * Request the current background color.
     */

external void foreground( color foreground);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_set_foreground"
    #pragma linkobj  "src/SDL2/color.o"
    /*
     * Set the foreground color for future drawing operations.
     */

external color foreground( );
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_get_foreground"
    #pragma linkobj  "src/SDL2/color.o"
    #pragma linksign [1]
    /*
     * Request the current foreground color.
     */

external color getColor( string name);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_get_color"
    #pragma linkobj  "src/SDL2/color.o"
    #pragma linksign [1, 2]
    /*
     * Request an RGB color representation for the named color.
     * If name starts with a hash '#' either 3 or 6 hexadecimal digits
     * must follow, which represent a color similar to HTML colors.
     * Else name is looked up in the system's rgb.txt file.
     * If no color could be found then the color white is returned.
     */

external void fullscreen( bool enable);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_enable_fullscreen"
    #pragma linkobj  "src/SDL2/display.o"
    /*
     * Create future display windows fullscreen. Please note
     * that this may change the system X11 video mode!
     * Give the user a mechanism to terminate the program gracefully
     * or else the system may stay in an undesirable screen resolution.
     * If all you want is the maximum screen resolution then 
     * specify a width and height of zero to 'initDisp' and
     * use 'noframe' to get rid of the window manager frame.
     */

external void noframe( bool enable);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_enable_noframe"
    #pragma linkobj  "src/SDL2/display.o"
    /*
     * Create future display windows without a window manager frame.
     */

external void cursor( bool enable);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_cursor"
    #pragma linkobj  "src/SDL2/title.o"
    /*
     * Enable or disable the mouse cursor in the application display window.
     */

external void heading( string heading);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_heading"
    #pragma linkobj  "src/SDL2/title.o"
    /*
     * Change the window manager frame header. This may trigger an old bug
     * in libX11 under certain circumstances and crash or deadlock.
     * After creating a new display window let the window manager
     * interact with it first before changing the 'heading'.
     * The function getSelection also uses this function.
     */

external SDL2 nullDisplay();
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_null"
    #pragma linkobj  "src/SDL2/data.o"
    #pragma linksign [0]
    /*
     * Return a NULL display as a placeholder.
     * This is occasionally useful when programming in SAC.
     */

external bool isNullDisplay( SDL2& disp);
    #pragma effect   TheWorld
    #pragma linkname "SAC_SDL2_isnull"
    #pragma linkobj  "src/SDL2/data.o"
    #pragma linksign [0,1]
    /*
     * Test if a display is a NULL display.
     * This is occasionally useful when programming in SAC.
     */

